name: Build Quickgui AppImage

on:
  push:
    branches: [ "main" ] # Or your default branch, e.g., master
  pull_request:
    branches: [ "main" ] # Or your default branch
  workflow_dispatch: # Allows manual triggering

jobs:
  build-appimage:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Quickgui repository
      uses: actions/checkout@v4

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable' # Or specify a version matching quickgui's needs

    - name: Install Build Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          jq curl file libfuse2 patchelf librsvg2-bin

    - name: Download linuxdeploy and AppImage plugin
      run: |
        # Download linuxdeploy
        curl -sLO https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        # Download AppImage plugin
        curl -sLO https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage
        chmod +x linuxdeploy-plugin-appimage-x86_64.AppImage

    # --- Corrected Step for Quickemu ---
    - name: Download latest Quickemu script
      id: download_quickemu
      run: |
        # Get the latest release source tarball URL (.orig.tar.gz)
        QUICKEMU_LATEST_SOURCE_URL=$(curl -s "https://api.github.com/repos/quickemu-project/quickemu/releases/latest" | jq -r '.assets[] | select(.name | endswith(".orig.tar.gz")) | .browser_download_url')

        if [ -z "$QUICKEMU_LATEST_SOURCE_URL" ] || [ "$QUICKEMU_LATEST_SOURCE_URL" == "null" ]; then
          echo "::error::Could not find latest Quickemu source tar.gz (.orig.tar.gz) release asset."
          exit 1
        fi

        echo "Downloading Quickemu source from: $QUICKEMU_LATEST_SOURCE_URL"
        curl -sLo quickemu_source.tar.gz "$QUICKEMU_LATEST_SOURCE_URL"

        # Extract the quickemu script
        mkdir -p quickemu_extracted
        # Extract the archive
        tar -xzf quickemu_source.tar.gz -C quickemu_extracted
        # Find the 'quickemu' script within the extracted directory (usually quickemu-VERSION/quickemu)
        QUICKEMU_SCRIPT=$(find quickemu_extracted -path '*/quickemu' -type f -print -quit) # Find the main script, stop after first find

        if [ -z "$QUICKEMU_SCRIPT" ]; then
           echo "::error::Could not find 'quickemu' script within the downloaded source archive."
           exit 1
        fi

        echo "Found quickemu script at: $QUICKEMU_SCRIPT"
        # Move the script to the current directory
        mv "$QUICKEMU_SCRIPT" ./quickemu
        chmod +x ./quickemu

        # Clean up
        rm -rf quickemu_extracted quickemu_source.tar.gz

        echo "Quickemu script prepared."
        # Set output for later steps
        echo "quickemu_path=$(realpath ./quickemu)" >> $GITHUB_OUTPUT
    # --- End of Corrected Step ---

    - name: Build Quickgui (Flutter Linux)
      run: |
        flutter pub get
        flutter build linux --release

    - name: Prepare AppDir structure
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

        # Copy Quickgui build output
        cp -r build/linux/x64/release/bundle/* AppDir/usr/
        # Ensure the main executable is in usr/bin (adjust if Flutter output changes)
        mv AppDir/usr/quickgui AppDir/usr/bin/quickgui

        # Copy Quickemu script (using the path from the output of the download step)
        cp ${{ steps.download_quickemu.outputs.quickemu_path }} AppDir/usr/bin/quickemu

        # Copy desktop file (adjust path if needed in quickgui repo)
        cp linux/data/com.github.quickgui.desktop AppDir/usr/share/applications/

        # Convert SVG icon to PNG and copy (adjust path if needed)
        # Use the 256x256 PNG directly if it exists and is preferred
        if [ -f "linux/data/icons/hicolor/256x256/apps/com.github.quickgui.png" ]; then
            cp linux/data/icons/hicolor/256x256/apps/com.github.quickgui.png AppDir/usr/share/icons/hicolor/256x256/apps/com.github.quickgui.png
            # Create a symlink for the generic name used in the .desktop file
            ln -s usr/share/icons/hicolor/256x256/apps/com.github.quickgui.png AppDir/com.github.quickgui.png
        elif [ -f "linux/data/icons/hicolor/scalable/apps/com.github.quickgui.svg" ]; then
            rsvg-convert -w 256 -h 256 -o AppDir/usr/share/icons/hicolor/256x256/apps/com.github.quickgui.png linux/data/icons/hicolor/scalable/apps/com.github.quickgui.svg
             # Create a symlink for the generic name used in the .desktop file
            ln -s usr/share/icons/hicolor/256x256/apps/com.github.quickgui.png AppDir/com.github.quickgui.png
        else
             echo "::warning::Could not find suitable icon file (PNG or SVG). AppImage might lack an icon."
             # Create a dummy icon link if needed by linuxdeploy
             touch AppDir/no_icon_found.png
             ln -s no_icon_found.png AppDir/com.github.quickgui.png
        fi

        # Ensure desktop file uses generic icon name expected by linuxdeploy/AppImage standard
        sed -i 's|^Icon=.*|Icon=com.github.quickgui|' AppDir/usr/share/applications/com.github.quickgui.desktop
        # Ensure Exec points to the binary name, not a path
        sed -i 's|^Exec=.*|Exec=quickgui %U|' AppDir/usr/share/applications/com.github.quickgui.desktop


    - name: Create Custom AppRun script
      run: |
        cat << 'EOF' > AppDir/AppRun
        #!/bin/sh
        # Get the absolute path to the AppImage runtime directory
        HERE="$(dirname "$(readlink -f "${0}")")"

        # Export the bundled bin directory to PATH so quickgui can find quickemu
        export PATH="${HERE}/usr/bin:${PATH}"

        # Export bundled libraries (linuxdeploy usually handles this in its generated AppRun,
        # but we replicate the essential part here for safety with a custom script)
        export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"

        # Set any other environment variables if needed by quickgui or quickemu
        # export SOME_VAR="some_value"

        # Execute the main Quickgui application binary
        # Pass all arguments ($@) to the application
        exec "${HERE}/usr/bin/quickgui" "$@"
        EOF
        chmod +x AppDir/AppRun

    - name: Run linuxdeploy to bundle dependencies and create AppImage
      run: |
        # Set version for AppImage filename (e.g., using date+run number)
        export VERSION=$(date +%Y%m%d)-${{ github.run_number }}

        # Run linuxdeploy
        # - It uses AppDir structure
        # - Bundles dependencies for quickgui AND quickemu (linuxdeploy scans shell scripts too)
        # - Uses our custom AppRun
        # - Integrates the .desktop file and icon
        # - Uses the AppImage plugin to package
        ./linuxdeploy-x86_64.AppImage \
          --appdir AppDir \
          --executable usr/bin/quickgui \
          --executable usr/bin/quickemu \
          --desktop-file AppDir/usr/share/applications/com.github.quickgui.desktop \
          --icon-file AppDir/usr/share/icons/hicolor/256x256/apps/com.github.quickgui.png \
          --custom-apprun AppDir/AppRun \
          --output appimage \
          --plugin appimage

        # Rename the output file for clarity (optional but recommended)
        # Use find to handle potential variations in the exact name generated by linuxdeploy
        find . -name "Quickgui*.AppImage" -exec mv {} Quickgui-${VERSION}-x86_64.AppImage \; || echo "No AppImage found to rename."

      env:
        # Pass environment variable for linuxdeploy AppImage plugin if needed
        # e.g., to set the output filename base (though linuxdeploy often derives it)
        # OUTPUT: Quickgui-${VERSION}-x86_64.AppImage # linuxdeploy appimage plugin might use this name base
        pass: "" # Avoid issues if env var isn't needed but referenced

    - name: List output files
      run: ls -lh Quickgui*.AppImage || echo "AppImage file not found."

    - name: Upload AppImage artifact
      uses: actions/upload-artifact@v4
      with:
        name: Quickgui-AppImage
        path: Quickgui*.AppImage
        if-no-files-found: error # Fail the step if the AppImage wasn't created
