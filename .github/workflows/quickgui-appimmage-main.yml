name: Build Quickgui AppImage

on:
  push:
    branches: [ "main" ] # Or your default branch, e.g., master
  pull_request:
    branches: [ "main" ] # Or your default branch
  workflow_dispatch: # Allows manual triggering

jobs:
  build-appimage:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Quickgui repository
      uses: actions/checkout@v4

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable' # Or specify a version matching quickgui's needs

    - name: Install Build Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          jq curl file libfuse2 patchelf librsvg2-bin

    - name: Download linuxdeploy and AppImage plugin
      run: |
        # Download linuxdeploy
        curl -sLO https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        # Download AppImage plugin
        curl -sLO https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage
        chmod +x linuxdeploy-plugin-appimage-x86_64.AppImage

    - name: Download latest Quickemu script
      id: download_quickemu
      run: |
        # Get the latest release source tarball URL (GitHub standard)
        QUICKEMU_LATEST_TARBALL_URL=$(curl -s "https://api.github.com/repos/quickemu-project/quickemu/releases/latest" | jq -r '.tarball_url')

        if [ -z "$QUICKEMU_LATEST_TARBALL_URL" ] || [ "$QUICKEMU_LATEST_TARBALL_URL" == "null" ]; then
          echo "::error::Could not find latest Quickemu release tarball URL via GitHub API."
          echo "::debug::API Response:"
          curl -s "https://api.github.com/repos/quickemu-project/quickemu/releases/latest"
          exit 1
        fi

        echo "Downloading Quickemu source tarball from: $QUICKEMU_LATEST_TARBALL_URL"
        curl -sL -o quickemu_source.tar.gz "$QUICKEMU_LATEST_TARBALL_URL"

        if [ ! -s quickemu_source.tar.gz ]; then
            echo "::error::Downloaded quickemu_source.tar.gz is empty or download failed."
            exit 1
        fi
        if ! tar -tzf quickemu_source.tar.gz > /dev/null; then
            echo "::error::Downloaded quickemu_source.tar.gz does not appear to be a valid tarball."
            if file quickemu_source.tar.gz | grep -q 'text'; then
              echo "::error::File content starts with:"
              head -n 5 quickemu_source.tar.gz
            fi
            exit 1
        fi

        mkdir -p quickemu_extracted
        tar -xzf quickemu_source.tar.gz -C quickemu_extracted --strip-components=1

        QUICKEMU_SCRIPT="quickemu_extracted/quickemu"

        if [ ! -f "$QUICKEMU_SCRIPT" ]; then
           echo "::error::Could not find 'quickemu' script at '$QUICKEMU_SCRIPT' after extraction."
           echo "::debug::Contents of quickemu_extracted directory:"
           ls -lA quickemu_extracted
           exit 1
        fi

        echo "Found quickemu script at: $QUICKEMU_SCRIPT"
        mv "$QUICKEMU_SCRIPT" ./quickemu
        chmod +x ./quickemu

        rm -rf quickemu_extracted quickemu_source.tar.gz

        echo "Quickemu script prepared."
        echo "quickemu_path=$(realpath ./quickemu)" >> $GITHUB_OUTPUT

    # --- Corrected Step with working-directory ---
    - name: Build Quickgui (Flutter Linux)
      working-directory: ${{ github.workspace }} # Ensure commands run in the project root
      run: |
        flutter pub get
        flutter build linux --release
    # --- End of Corrected Step ---

    - name: Prepare AppDir structure
      # This step uses relative paths from the workspace root, so it's fine without explicit working-directory
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

        # Copy Quickgui build output (uses path relative to workspace)
        cp -r build/linux/x64/release/bundle/* AppDir/usr/
        mv AppDir/usr/quickgui AppDir/usr/bin/quickgui

        # Copy Quickemu script (uses path relative to workspace where download step placed it)
        cp ${{ steps.download_quickemu.outputs.quickemu_path }} AppDir/usr/bin/quickemu

        # Copy desktop file (uses path relative to workspace)
        cp linux/data/com.github.quickgui.desktop AppDir/usr/share/applications/

        # Handle Icons (uses paths relative to workspace)
        if [ -f "linux/data/icons/hicolor/256x256/apps/com.github.quickgui.png" ]; then
            cp linux/data/icons/hicolor/256x256/apps/com.github.quickgui.png AppDir/usr/share/icons/hicolor/256x256/apps/com.github.quickgui.png
            ln -s usr/share/icons/hicolor/256x256/apps/com.github.quickgui.png AppDir/com.github.quickgui.png
        elif [ -f "linux/data/icons/hicolor/scalable/apps/com.github.quickgui.svg" ]; then
            rsvg-convert -w 256 -h 256 -o AppDir/usr/share/icons/hicolor/256x256/apps/com.github.quickgui.png linux/data/icons/hicolor/scalable/apps/com.github.quickgui.svg
            ln -s usr/share/icons/hicolor/256x256/apps/com.github.quickgui.png AppDir/com.github.quickgui.png
        else
             echo "::warning::Could not find suitable icon file (PNG or SVG). AppImage might lack an icon."
             touch AppDir/no_icon_found.png
             ln -s no_icon_found.png AppDir/com.github.quickgui.png
        fi

        sed -i 's|^Icon=.*|Icon=com.github.quickgui|' AppDir/usr/share/applications/com.github.quickgui.desktop
        sed -i 's|^Exec=.*|Exec=quickgui %U|' AppDir/usr/share/applications/com.github.quickgui.desktop


    - name: Create Custom AppRun script
      run: |
        cat << 'EOF' > AppDir/AppRun
        #!/bin/sh
        HERE="$(dirname "$(readlink -f "${0}")")"
        export PATH="${HERE}/usr/bin:${PATH}"
        export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
        exec "${HERE}/usr/bin/quickgui" "$@"
        EOF
        chmod +x AppDir/AppRun

    - name: Run linuxdeploy to bundle dependencies and create AppImage
      run: |
        export VERSION=$(date +%Y%m%d)-${{ github.run_number }}
        ./linuxdeploy-x86_64.AppImage \
          --appdir AppDir \
          --executable usr/bin/quickgui \
          --executable usr/bin/quickemu \
          --desktop-file AppDir/usr/share/applications/com.github.quickgui.desktop \
          --icon-file AppDir/usr/share/icons/hicolor/256x256/apps/com.github.quickgui.png \
          --custom-apprun AppDir/AppRun \
          --output appimage \
          --plugin appimage

        find . -name "Quickgui*.AppImage" -exec mv {} Quickgui-${VERSION}-x86_64.AppImage \; || echo "No AppImage found to rename."

      env:
        pass: ""

    - name: List output files
      run: ls -lh Quickgui*.AppImage || echo "AppImage file not found."

    - name: Upload AppImage artifact
      uses: actions/upload-artifact@v4
      with:
        name: Quickgui-AppImage
        path: Quickgui*.AppImage
        if-no-files-found: error
