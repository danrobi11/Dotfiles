# Atomic Void Linux: Cloning and Portability

Cloning Void Linux and deploying it on multiple devices with an atomic design can create a standout, practical, and portable system. This vision for a runit-powered, Atomic Void leverages the strengths of Void Linux while enhancing usability and portability.

## Concept: Cloning Void Linux

Imagine a workflow where you:

1. Configure Void Linux exactly once (packages, runit services, display environment).
2. Clone the configured system completely (files, settings, services).
3. Deploy the cloned system effortlessly on new devices.

Void currently supports this cloning process, though manually. An atomic approach simplifies this process significantly.

---

## Current Mutable Cloning Method

Void Linux's existing mutable system allows manual cloning:

### Step-by-Step Process:

- **Backup Filesystem:**
  ```bash
  tar -cpzf void_backup.tar.gz --exclude=/proc --exclude=/sys --exclude=/dev /
  ```
  **or**
  ```bash
  rsync -aAX --exclude="{/dev/*,/proc/*,/sys/*,/tmp/*}" / /mnt/backup
  ```

- **Backup Installed Packages:**
  ```bash
  xbps-query -l > installed_packages.txt
  ```

- **Backup Runit Services:**
  Note enabled services with:
  ```bash
  ls -l /var/service/
  ```

- **Transfer Backup:**
  Move backups (`void_backup.tar.gz` or rsync directory) to the new device.

- **Restore on New Device:**
  1. Install base Void Linux from ISO.
  2. Extract the backup:
     ```bash
     tar -xpzf void_backup.tar.gz -C /
     ```
     **or**
     ```bash
     rsync -aAX /mnt/backup/ /
     ```
  3. Reinstall packages:
     ```bash
     xbps-install -S $(awk '{print $2}' installed_packages.txt)
     ```
  4. Restore runit services (symlinks).
  5. Fix bootloader (GRUB).

### Pros & Cons:

**Pros:**
- Immediate availability
- Exact replication (glibc/musl, X11/Wayland, configurations)

**Cons:**
- Manual and time-consuming
- Non-atomic, potential for mismatch errors
- Device-specific adjustments required (UUIDs, network configs)

---

## Vision: Atomic Void Linux

An atomic Void Linux would dramatically simplify cloning:

### Atomic System Overview:

- **Immutable Root:** (`/usr`, `/bin`, etc.) updated atomically via `xbps-atomic`
- **Snapshots:** Managed by Btrfs or OSTree for consistency and rollback capabilities
- **Mutable Areas:** `/home` and `/var` store user data and Flatpaks

### Atomic Cloning Workflow:

- **Capture System State:**
  ```bash
  xbps-atomic export void-clone-2025-03-15.img
  ```
  Backup user data separately:
  ```bash
  tar -czf user_data.tar.gz /home /var
  ```

- **Transfer to New Device:**
  Move both `void-clone-2025-03-15.img` and `user_data.tar.gz`.

- **Deploy Atomic Clone:**
  1. Boot minimal Atomic Void ISO.
  2. Import the atomic image:
     ```bash
     xbps-atomic import void-clone-2025-03-15.img
     ```
  3. Restore user data:
     ```bash
     tar -xzf user_data.tar.gz -C /
     ```
  4. Reconfigure GRUB bootloader.
  5. Reboot into cloned system.

### Advantages of Atomic Approach:

- **Consistency:** Verified, atomic snapshots prevent partial restoration errors.
- **Rollback:** Instant rollback with `xbps-atomic` if issues arise.
- **Portability:** Simplified to a single image file.
- **Minimalism:** Keeps runit and avoids centralized control (no systemd).
- **Flexibility:** Maintains your choice (glibc or musl).
- **Unix-like Simplicity:** Leverages standard tools (tar, xbps).

### Handling Device-Specific Variations:

- **Hardware Adjustments:** Modify `/etc/fstab` or kernel parameters post-deployment.
- **Networking Configurations:** Stored in immutable snapshot, easily adjusted post-import.

---

## Why This Fits Your Vision

- **Ideal Compatibility:** Runit-powered Atomic Void respects Unix philosophy without systemd overhead.
- **Freedom of Choice:** Cloning musl-based systems, Sway environments, Flatpak integrations, preserving configurations across devices.
- **Avoiding Centralized Control:** Immutability and cloning together avoid the complexity and control issues of other atomic systems.

---

## Roadmap to Reality

### Current Situation:
- Manual cloning possible (tar, rsync).

### Needed Development:
- Implement `xbps-atomic` for managing atomic snapshots.
- Integrate snapshot management (Btrfs, OSTree).
- Maintain runit as PID 1 for simple and reliable service management.

### Community Potential:
- Opportunity to spark community collaboration (Void Linux subreddit, void-packages GitHub issues).

---

## Final Thoughts

Cloning Void Linux today is practical but manual. An atomic, runit-powered Void Linux enhances this significantly, delivering portability, reliability, and simplicity—free from systemd’s complexity. This vision offers a truly portable, flexible, and robust system suitable for diverse devices.

